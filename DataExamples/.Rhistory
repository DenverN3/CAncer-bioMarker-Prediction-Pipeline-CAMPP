viridis(2)
gsub(viridis(2), "FF", "")
ny <- viridis(2)
ny
gsub(pattern = "FF", replacement = "", x = ny)
setwd("~/Desktop/Thilde/MS_MS_TIF_analysis_2014_2015/Pipeline/Results")
load("arg_data.Rdata")
head(arg.data)
tail(arg.data)
names(arg.data)
rownames(arg.data)
is.na(arg.data)
is.na(arg.data) == TRUE
as.vector(is.na(arg.data))
unique(as.vector(is.na(arg.data)))
load("arg_dataTrans.Rdata")
head(arg.data)
unique(as.vector(is.na(arg.data)))
is.na(arg.data) == TRUE
head(arg.data)
is.na(arg.data)
which(is.na(arg.data))
arg.data[which(is.na(arg.data)),]
arg.data[which(is.na(arg.data))]
which(is.na(arg.data))
head(arg.data)
head(arg.data[,1]
arg.data[1,]
arg.data[,1]
hsamiR924002154
hsamiR936002179
load("arg_data.Rdata")
arg.data[rownames(arg.data) %in% c("hsamiR924002154", "hsamiR936002179")]
arg.data[rownames(arg.data) %in% c("hsamiR924002154", "hsamiR936002179"),]
greater_than_background <- data.frame(apply(NIFTIF[,Tn:ncol(NIFTIF)], 1, function(x) sum(x > 0)))
greater_than_background
head(great)
head(greater_than_background)
greater_than_background$apply.NIFTIF...Tn.ncol.NIFTIF....1..function.x..sum.x...0.. == "hsamiR924002154"
which(greater_than_background$apply.NIFTIF...Tn.ncol.NIFTIF....1..function.x..sum.x...0.. == "hsamiR924002154")
head(NIFTIF)
grep("hsamiR924002154", rownames(NIFTIF))
greater_than_background[733,]
greater_than_background[733]
greater_than_background[720:733,]
head(greater_than_background)
greater_than_background <- data.frame(apply(NIFTIF[,Tn:ncol(NIFTIF)], 1, function(x) sum(x > 0)))
colnames(greater_than_background)
greater_than_background <- apply(NIFTIF[,Tn:ncol(NIFTIF)], 1, function(x) sum(x > 0))
greater_than_background
greater_than_TNBC <- which(greater_than_background < 8)
greater_than_background
greater_than_background <- data.frame(apply(NIFTIF[,Tn:ncol(NIFTIF)], 1, function(x) sum(x > 0)))
greater_than_TNBC <- which(greater_than_background[,1] < 8)
greater_than_TNBC
greater_than_background <- apply(NIFTIF[,Tn:ncol(NIFTIF)], 1, function(x) sum(x > 0))
class(greater_than_background)
which(greater_than_background[,1] < 8)
which(greater_than_background[1] < 8)
which(greater_than_background[1,] < 8)
which(as.numeric(greater_than_background) < 8)
which(greater_than_background < 8)
ny <- as.factor(c("A", "A", "A", "B", "B", "C", "C", "C"))
ny
table(ny)
which(ny < 3)
which(as.numeric(ny) < 3)
which(table(ny) < 3)
which(as.numeric(table(ny)) < 3)
ny
lasso.list <- list()
lasso.lev <- levels(ny)
for (idx in 1:length(lasso.lev)) {
pos <- which(ny == as.character(lasso.lev[idx]))
lasso.list[[idx]] <- pos
}
names(lasso.list) <- lasso.lev
lasso.list
len <- unlist(lapply(lasso.list, function(x) length(x)))
len
as.numeric(table(ny)) < 3
unique(as.numeric(table(ny)) < 3)
as.numeric(table(ny))
len <- as.numeric(table(ny))
len
test.train <- unique(len >= 50)
test.train
test.train <- unique(len >= 2)
test.train
len <- as.numeric(table(ny))
len
min(len)
greater_than_background <- data.frame(apply(NIFTIF[,Tn:ncol(NIFTIF)], 1, function(x) sum(x == 0)))
greater_than_background
greater_than_background[733]
greater_than_background[733,]
greater_than_background <- data.frame(apply(NIFTIF[,Tn:ncol(NIFTIF)], 1, function(x) x == 0))
greater_than_background[733,]
greater_than_background <- data.frame(apply(NIFTIF[,Tn:ncol(NIFTIF)], 1, function(x) sum(x <= 0)))
greater_than_background[733,]
NIFTIF[733,]
greater_than_background <- data.frame(apply(NIFTIF[,Tn:ncol(NIFTIF)], 1, function(x) sum(x = 0)))
NIFTIF[733,]
greater_than_background
greater_than_background <- data.frame(apply(NIFTIF[,Tn:ncol(NIFTIF)], 1, function(x) sum(x > 0)))
greater_than_background
greater_than_background[733,]
greaterthanBG <- apply(NIFTIF, 1, function(x) sum(x > 0))
greaterthanBG  <- which(as.numeric(greaterthanBG) < 8)
greater_than_background
greaterthanBG <- apply(NIFTIF, 1, function(x) sum(x > 0))
greater_than_background
greaterthanBG <- apply(NIFTIF, 1, function(x) sum(x > 0))
greaterthanBG
greaterthanBG  <- which(as.numeric(greaterthanBG) < 8)
greaterthanBG
greaterthanBG <- apply(NIFTIF, 1, function(x) sum(x > 0))
greaterthanBG  <- which(as.numeric(greaterthanBG) < 8)
greaterthanBG
greaterthanBG <- apply(NIFTIF, 1, function(x) sum(x > 0))
greaterthanBG  <- which(as.numeric(greaterthanBG) < 8)
greaterthanBG
rep("ny", 5)
setwd("~/Desktop/Thilde/MS_MS_TIF_analysis_2014_2015/Pipeline/Results")
load("LASSOres.Rdata")
dim(dat[[1]])
dim(length()[[1]])
length([[2]])
length(dat[[2]])
LASSO_feature <- function(my.seed, my.data, my.group, my.LAorEN, my.validation=FALSE, my.multinorm=TRUE) {
if (my.validation == TRUE) {
ll <- list()
llev <- levels(as.factor(my.group))
for (idx in 1:length(llev)) {
pos <- which(my.group == as.character(llev[idx]))
ll[[idx]] <- pos
}
my.samp <- unlist(lapply(ll, function(x) sample(x, ceiling((length(x)/4)))))
testD <- my.data[,my.samp]
testG <- as.integer(my.group[my.samp])
my.data <- my.data[,-my.samp]
my.group <- as.integer(my.group[-my.samp])
}
if(my.multinorm == TRUE) {
set.seed(my.seed)
my.fit <- cv.glmnet(x = t(my.data), y = my.group, family="multinomial", type.multinomial = "grouped", nfolds = 10, alpha = my.LAorEN)
my.coef <- coef(my.fit, s=my.fit$lambda.1se)
my.ma <- as(my.coef$`1`, "matrix")
meanerror <- mean(predict(my.fit, t(my.data), s=my.fit$lambda.1se, type="class") != my.group)
} else {
set.seed(my.seed)
my.fit <- cv.glmnet(x = t(my.data), y = my.group, family = "binomial", type.measure = "class", nfolds = 10, alpha = my.LAorEN)
my.coef <- coef(my.fit, s=my.fit$lambda.1se)
my.ma <- as(my.coef, "matrix")
meanerror <- mean(predict(my.fit, t(my.data), s=my.fit$lambda.1se, type="class") != my.group)
}
if (exists("testD")) {
my.roc <- roc(testG, as.numeric(predict(my.fit, t(testD), type = "response", s =my.fit$lambda.1se, alpha = my.LAorEN)))
my.roc <- as.numeric(sub(".*: ", "", my.roc$auc))
}
my.ma <- names(my.ma[my.ma[,1] != 0, ])
if (exists("testD")) {
return(list(my.ma, meanerror, my.roc))
} else {
return(list(my.ma, meanerror))
}
rm(my.fit)
rm(my.coef)
}
test <- LASSO_feature(5, dat[[1]], dat[[2]], 0.5, TRUE, FALSE)
library(glmnet)
library(pROC)
test <- LASSO_feature(5, dat[[1]], dat[[2]], 0.5, TRUE, FALSE)
test
rm(dat)
load("LASSO_res.Rdata")
length(LASSO.res)
length(LASSO.res[[1]])
length(LASSO.res[1])
length(LASSO.res[[1]][[1]])
LASSO.res[[1]]
LASSO.res[[2]]
LASSO.res[[3]]
LASSO.res[[4]]
LASSO.res[[5]]
LASSO.res[[6]]
LASSO.res[[7]]
LASSO.res[[8]]
LASSO.res[[9]]
LASSO.res[[10]]
LASSO.res[[11]]
VarsSelect <- Reduce(intersect, lapply(LASSO.res, '[[', 1))
VarsSelect
if (length(VarsSelect) < 2) {
stop("\n- There is no overlap in 10 elastic net runs. If you ran LASSO (-l was et to 1.0) you can try and relax alpha and perform elastic net instead (0.0 < -l < 1.0). Otherwise you data may have to high of a noise ratio to sample size, LASSO should not be performed.\n")
}
VarsSelect <- data.frame(VarsSelect[-1])
colnames(VarsSelect) <- c("LASSO.Var.Select")
xlsx::write.xlsx(VarsSelect, file=paste0(arg.filename,"_LASSO.xlsx"), row.names=FALSE)
xlsx::write.xlsx(VarsSelect, file=paste0("test","_LASSO.xlsx"), row.names=FALSE)
consensus <- DE.out[DE.out$name %in% VarsSelect$LASSO.Var.Select,]
LassoRun <- paste0(rep("Run", 10), 1:10)
CrossValErrormean <- round(unlist(lapply(LASSO.res, '[[', 2)), digits = 4)
pCVEM <- data.frame(cbind(CrossValErrormean, LassoRun))
pCVEM <- ggplot(data=pCVEM, aes(x=LassoRun, y=CrossValErrormean)) + geom_bar(aes(fill = as.factor(LassoRun)), stat="identity") + theme_minimal() + scale_x_discrete(limits=c(LassoRun)) + scale_fill_viridis(begin = 0.0, end = 0.0, discrete=TRUE, option="cividis" ) + theme(legend.position="none")
pCVEM
length(LASSO.res[[1]]) > 2
setwd("~/Desktop")
surv <- read.delim("SurvivalInfo.txt")
surv <- read.delim("SurvivalInfo.txt", header = FALSE)
surv
surv <- read.delim("SurvivalInfo.txt", header = FALSE)
surv
surv$outcomedate <- as.Date(paste0(surv$V5, "-", surv$V4), format = "%d %m %Y")
surv
surv$outcomedate <- Â´paste0(surv$V5, "-", surv$V4)
surv$outcomedate <- paste0(surv$V5, "-", surv$V4)
surv
surv$outcomedate <- gsub("NA-NA", NA, surv$outcomedate)
surv
surv$outcomedate <- as.Date(surv$outcomedate, format = "%d-%m-%Y")
surv
class(surv$outcomedate)
surv$start <- ifelse(is.na(surv$outcomedate), NA, as.Date("2014-10-08", format = "%Y-%m-%d"))
surv
surv$start <- ifelse(is.na(surv$outcomedate), NA, as.Date("08-10-2014", format = "%d-%m-%Y"))
surv
surv$start <- ifelse(is.na(surv$outcomedate), NA, as.Date(c("08-10-2014"), format = "%d-%m-%Y"))
surv
as.Date(c("08-10-2014"), format = "%d-%m-%Y")
surv$start <- ifelse(is.na(surv$outcomedate), NA, "08-10-2014")
surv
surv$start <- as.Date(surv$start, format = "%d-%m-%Y")
surv
surv$outcome.time <- difftime(surv$start- surv$outcomedate, units = "days")
surv$stop <- surv$start
surv$start <- NULL
surv
surv$stop <- as.character(gsub("-", ".", surv$stop))
surv
surv$outcomedate <- as.character(gsub("-", ".", surv$outcomedate))
surv
surv$stop <- strptime(surv$stop, format = "%Y.%m.%d")
surv
surv$outcomedate <- strptime(surv$outcomedate, format = "%Y.%m.%d")
surv
surv$outcome.time <- difftime(surv$start- surv$outcomedate, units = "days")
class(surv$outcomedate)
surv$outcome.time <- difftime(surv$start, surv$outcomedate, units = "days")
surv$outcome.time <- difftime(surv$stop, surv$outcomedate, units = "days")
surv
surv$outcome.time <- difftime(surv$stop, surv$outcomedate, units = "days")/365
surv
1870.0000/365
surv$outcome.time <- as.double(difftime(surv$stop, surv$outcomedate, units = "days"))/365
surv
surv$outcome.time <- (as.double(difftime(surv$stop, surv$outcomedate, units = "days"))/365)*12
surv
df <- data.frame(surv$V1, surv$V2, surv$V3, surv$outcomedate, surv$stop, surv$outcome.time)
head(df)
colnames(df) <- c("ids", "age", "survival", "outcome.date", "stop.date". "outcome.time")
colnames(df) <- c("ids", "age", "survival", "outcome.date", "stop.date", "outcome.time")
df
write.table(df, "SurvivalInformationThilde.txt", sep ="\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
setwd("~/Desktop/Thilde/MS_MS_TIF_analysis_2014_2015/Pipeline/DataExamples")
mRNAmeta<- read.delim("mRNAmetadata.txt", header = TRUE)
mRNAmeta
mRNAmeta$survival <- NULL
head(mRNAmeta)
head(df)
final <- join(mRNAmeta, df)
library(plyr)
final <- join(mRNAmeta, df)
head(final)
dim(df)
dim(mRNAmeta)
dim(final)
final$ids
mRNAmeta$ids
final$outcome.date - NULL
final$outcome.date <- NULL
final$stop.date <- NULL
head(final)
head(surv)
surv$outcome.time <- NULL
setwd("~/Desktop")
Surv2 <- read.delim("SurvivalInformation.txt")
Surv2
Surv2 <- read.delim("SurvivalInformation.txt")
Surv2
Surv2 <- read.delim("SurvivalInformation.txt")
Surv2
Surv2 <- read.delim("SurvivalInformation.txt")
Surv2
Surv2 <- read.delim("SurvivalInformation.txt")
Surv2
Surv2 <- read.delim("SurvivalInformation.txt")
dim(Surv2)
dim(Surv)
dim(surv)
surv$entry <- Surv2$dateentry
head(surv)
surv
surv$entry <- strptime(surv$entry, format = "%d.%m.%y")
surv
surv$entry <- Surv2$dateentry
surv$entry <- strptime(surv$entry, format = "%d-%m-%y")
surv
surv$entry <- Surv2$dateentry
surv
surv$entry <- strptime(surv$entry, format = "%d-%m-%y")
surv
surv$outcome.time <- (as.double(difftime(surv$stop, surv$entry, units = "days"))/365)*12
surv
surv2 <- surv[,c(1,2,3,9,10,11,12)]
surv2
colnames(surv2) <- c("ids", "age", "survival", "outcome.date", "stop.date", "entry.date", "outcome.time")
surv2
write.table(surv2, "SurvivalInformationThilde.txt", sep ="\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
final <- join(mRNAmeta, surv2)
head(final)
dim(final)
final$stop.date <- NULL
final$entry.date <- NULL
final$outcome.date <- NULL
dim(final)
head(final)
final$outcome <- final$survival
dim(final)
head(final)
write.table(final, "mRNAmetadata.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
surv2
surv2$stop.date <- strptime(rep("2014-10-08", nrow(surv2)), format = "%Y-%m-%y")
surv2
surv2$stop.date <- strptime(rep("2014-10-08", nrow(surv2)), format = "%Y-%m-%d")
surv2
surv2$outcome.time <- (as.double(difftime(surv2$stop.date, surv2$entry.date, units = "days"))/365)*12
surv2
write.table(surv2, "SurvivalInformationThilde.txt", sep ="\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
surv2$outcome <- surv2$survival
write.table(surv2, "SurvivalInformationThilde.txt", sep ="\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
final <- join(mRNAmeta, surv2)
head(final)
write.table(final, "mRNAmetadata.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
setwd("~/Desktop/Thilde/MS_MS_TIF_analysis_2014_2015/Pipeline/Results/SurvivalResults")
load("mylist.Rdata")
mylist[[1]]
mylist[[2]]
mylist[[3]]
mylist[[1]]
mylist[[2]]
features <- mylist[[1]]
arg.survcovar <- NULL
covariate_linearity <- list()
if(!is.null(arg.survcovar)) {
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),") + ", arg.survcovar, ", data = surv_object, x=TRUE,y=TRUE)"))
eval(acall)
covariate_linearity[[as.character(f)]] <- result
}
} else {
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),"), data = surv_object, x=TRUE,y=TRUE)"))
eval(acall)
covariate_linearity[[as.character(f)]] <- result
}
}
library(survcomp)
features <- mylist[[1]]
arg.survcovar <- NULL
covariate_linearity <- list()
if(!is.null(arg.survcovar)) {
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),") + ", arg.survcovar, ", data = surv_object, x=TRUE,y=TRUE)"))
eval(acall)
covariate_linearity[[as.character(f)]] <- result
}
} else {
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),"), data = surv_object, x=TRUE,y=TRUE)"))
eval(acall)
covariate_linearity[[as.character(f)]] <- result
}
}
library(survminer)
features <- mylist[[1]]
arg.survcovar <- NULL
covariate_linearity <- list()
if(!is.null(arg.survcovar)) {
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),") + ", arg.survcovar, ", data = surv_object, x=TRUE,y=TRUE)"))
eval(acall)
covariate_linearity[[as.character(f)]] <- result
}
} else {
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),"), data = surv_object, x=TRUE,y=TRUE)"))
eval(acall)
covariate_linearity[[as.character(f)]] <- result
}
}
features <- mylist[[1]]
features
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),"), data = surv_object, x=TRUE,y=TRUE)"))
}
acall
library(rms)
features <- mylist[[1]]
arg.survcovar <- NULL
covariate_linearity <- list()
if(!is.null(arg.survcovar)) {
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),") + ", arg.survcovar, ", data = surv_object, x=TRUE,y=TRUE)"))
eval(acall)
covariate_linearity[[as.character(f)]] <- result
}
} else {
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),"), data = surv_object, x=TRUE,y=TRUE)"))
eval(acall)
covariate_linearity[[as.character(f)]] <- result
}
}
features <- mylist[[1]]
surv_object <- mylist[[3]]
arg.survcovar <- NULL
covariate_linearity <- list()
if(!is.null(arg.survcovar)) {
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),") + ", arg.survcovar, ", data = surv_object, x=TRUE,y=TRUE)"))
eval(acall)
covariate_linearity[[as.character(f)]] <- result
}
} else {
for (f in features) {
acall <- parse(text = paste0("result <- cph(Surv(outcome.time, outcome) ~ rcs(age) + rcs(", as.character(f),"), data = surv_object, x=TRUE,y=TRUE)"))
eval(acall)
covariate_linearity[[as.character(f)]] <- result
}
}
setwd("~/Desktop/Thilde/MS_MS_TIF_analysis_2014_2015/Pipeline/DataExamples")
library(openxlsx)
mRNAdata <- openxlsx::read.xlsx("mRNAdata.xlsx", sheet = 1, colNames = TRUE, rowNames = FALSE)
head(mRNAdata)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(dplyr)
library(DT)
browseVignettes("TCGAbiolinks")
query <- GDCquery(project = "TCGA-OV",
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
legacy = TRUE)
GDCdownload(query, method = "api", files.per.chunk = 10)
data <- GDCprepare(query)
head(data)
head(query)
query <- GDCquery(project = "TCGA-OV",
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
legacy = TRUE)
query <- GDCquery(project = "TCGA-OV",
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
legacy = TRUE, summarizedExperiment = FALSE)
query <- GDCquery(project = "TCGA-OV",
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
legacy= TRUE)
DL <- GDCdownload(query, method = "api", files.per.chunk = 10)
data <- GDCprepare(query)
data <- GDCprepare(query, summarizedExperiment = FALSE)
class(data)
head(data)
datatable(as.data.frame(colData(data)),
options = list(scrollX = TRUE, keys = TRUE, pageLength = 5),
rownames = FALSE)
data.table(as.data.frame(colData(data)),
options = list(scrollX = TRUE, keys = TRUE, pageLength = 5),
rownames = FALSE)
library(data.table)
data.table(as.data.frame(colData(data)),
options = list(scrollX = TRUE, keys = TRUE, pageLength = 5),
rownames = FALSE)
data.table(data,
options = list(scrollX = TRUE, keys = TRUE, pageLength = 5),
rownames = FALSE)
getwd
getwd()
query <- GDCquery(project = "TCGA-CESC",
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
legacy= TRUE, barcode = c("TCGA-C5-A1BL-01A","TCGA-EA-A97N-01A"))
GDCdownload(query, method = "api", files.per.chunk = 10)
data <- GDCprepare(query)
devtools::install_github(repo = "BioinformaticsFMRP/TCGAbiolinks")
